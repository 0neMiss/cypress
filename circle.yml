version: 2.1

# usually we don't build Mac app - it takes a long time
# but sometimes we want to really confirm we are doing the right thing
# so just add your branch to the list here to build and test on Mac
macBuildFilters: &macBuildFilters
  filters:
    branches:
      only:
        - develop
        - v6.0-release
        - include-electron-node-version

defaults: &defaults
  parallelism: 1
  working_directory: ~/cypress
  parameters:
    executor:
      type: executor
      default: cy-doc
  executor: <<parameters.executor>>
  environment:
    ## set specific timezone
    TZ: "/usr/share/zoneinfo/America/New_York"

    ## store artifacts here
    CIRCLE_ARTIFACTS: /tmp/artifacts

    ## set so that e2e tests are consistent
    COLUMNS: 100
    LINES: 24

executors:
  # the Docker image with Cypress dependencies and Chrome browser
  cy-doc:
    docker:
      - image: cypress/browsers:node12.18.3-chrome83-ff77
    environment:
      PLATFORM: linux

  # Docker image with non-root "node" user
  non-root-docker-user:
    docker:
      - image: cypress/browsers:node12.18.3-chrome83-ff77
        user: node
    environment:
      PLATFORM: linux

  # executor to run on Mac OS
  # https://circleci.com/docs/2.0/executor-types/#using-macos
  # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
  mac:
    macos:
      # Executor should have Node >= required version
      xcode: "11.3.1"
    environment:
      PLATFORM: mac

commands:
  install-required-node:
    # https://discuss.circleci.com/t/switch-nodejs-version-on-machine-executor-solved/26675/2
    description: Install Node version matching .node-version
    steps:
      - run:
          name: Install NVM
          # TODO: determine why we get the missing .nvmrc file error
          command: |
            export NODE_VERSION=$(cat .node-version)
            echo "Installing Node $NODE_VERSION"
            cp .node-version .nvmrc
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.35.3/install.sh | bash
      - run:
          # https://github.com/nvm-sh/nvm#nvmrc
          name: Install Node
          command: |
            . ./scripts/load-nvm.sh
            echo "before nvm install"
            nvm install
            echo "before nvm use"
            nvm use
            echo "before nvm alias default"
            nvm alias default
            node --version

  install-latest-chrome:
    description: Install latest Google Chrome (stable)
    parameters:
      browser:
        default: "electron"
        description: browser shortname to target
        type: string
    steps:
      - run:
          name: Install latest Google Chrome (stable)
          command: |
            if [ <<parameters.browser>> == "chrome" ]; then
              echo "**** Running Chrome tests.  Installing latest stable version of Google Chrome. ****"
              apt-get update
              apt-get install google-chrome-stable -y
              echo "**** Location of Google Chrome Installation: "`which google-chrome`" ****"
              echo "**** Google Chrome Version: "`google-chrome --version`" ****"
            else
              echo "**** Not updating Chrome. Running tests in '<<parameters.browser>>' ****"
            fi

  run-e2e-tests:
    parameters:
      browser:
        description: browser shortname to target
        type: string
    steps:
      - attach_workspace:
          at: ~/
      - check-conditional-ci
      - run:
          command: yarn workspace @packages/server test ./test/e2e/$(( $CIRCLE_NODE_INDEX ))_downloads_spec.ts --browser <<parameters.browser>>
      - verify-mocha-results
      - store_test_results:
          path: /tmp/cypress
      - store_artifacts:
          path: /tmp/artifacts
      - store-npm-logs

  store-npm-logs:
    description: Saves any NPM debug logs as artifacts in case there is a problem
    steps:
      - store_artifacts:
          path: ~/.npm/_logs

  post-install-comment:
    description: Post GitHub comment with a blurb on how to install pre-release version
    steps:
      - run: ls -la
      - run: ls -la binary-url.json npm-package-url.json
      - run: cat binary-url.json
      - run: cat npm-package-url.json
      - run:
          name: Post pre-release install comment
          command: |
            node scripts/add-install-comment.js \
              --npm npm-package-url.json \
              --binary binary-url.json

  verify-mocha-results:
    description: Double-check that Mocha tests ran as expected.
    parameters:
      expectedResultCount:
        description: The number of result files to expect, ie, the number of Mocha test suites that ran.
        type: integer
        ## by default, assert that at least 1 test ran
        default: 0
    steps:
      - run: yarn verify:mocha:results <<parameters.expectedResultCount>>

  wait-on-circle-jobs:
    description: Polls certain Circle CI jobs until they finish
    parameters:
      job-names:
        description: comma separated list of circle ci job names to wait for
        type: string
    steps:
      - run:
          name: "Waiting on Circle CI jobs: <<parameters.job-names>>"
          command: node ./scripts/wait-on-circle-jobs.js --job-names="<<parameters.job-names>>"

  check-conditional-ci:
    description: Halt CI if the package that this job corresponds to is unchanged
    steps:
      - run:
          name: Check if job should run
          command: node scripts/check-conditional-ci.js

jobs:
  ## code checkout and yarn installs
  build:
    <<: *defaults
    steps:
      - checkout
      - install-required-node
      - run:
          name: Print working folder
          command: echo $PWD
      - run:
          name: print global yarn cache path
          command: echo $(yarn global bin)
      - run:
          name: print Node version
          command: |
            . ./scripts/load-nvm.sh
            echo "nvm use default"
            nvm use default
            node -v
      - run:
          name: print yarn version
          command: yarn -v
      - run:
          name: check Node version
          command: |
            . ./scripts/load-nvm.sh
            yarn check-node-version

      ## make sure the TERM is set to 'xterm' in node (Linux only)
      ## else colors (and tests) will fail
      ## See the following information
      ##   * http://andykdocs.de/development/Docker/Fixing+the+Docker+TERM+variable+issue
      ##   * https://unix.stackexchange.com/questions/43945/whats-the-difference-between-various-term-variables
      - run:
          name: Check terminal
          command: |
            . ./scripts/load-nvm.sh
            yarn check-terminal

      - restore_cache:
          name: Restore yarn cache
          key: v{{ .Environment.CACHE_VERSION }}-{{ arch }}-deps-root-{{ checksum "yarn.lock" }}

      # show what is already cached globally
      - run: ls $(yarn global bin)
      - run: ls $(yarn global bin)/../lib/node_modules

      # try several times, because flaky NPM installs ...
      - run:
          name: install and build
          command: |
            . ./scripts/load-nvm.sh
            yarn --frozen-lockfile || yarn --frozen-lockfile
            yarn build-prod
      - run:
          name: Top level packages
          command: yarn list --depth=0 || true

      - store-npm-logs

      - save_cache:
          name: Save yarn cache
          key: v{{ .Environment.CACHE_VERSION }}-{{ arch }}-deps-root-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache

      ## save entire folder as artifact for other jobs to run without reinstalling
      - persist_to_workspace:
          root: ~/
          paths:
            - cypress
            - .ssh

  lint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - install-required-node
      ## this will catch ".only"s in js/coffee as well
      - run:
          name: Linting ðŸ§¹
          command: |
            . ./scripts/load-nvm.sh
            git clean -df
            yarn lint --max-warnings=0
      - run:
          name: cypress info (dev)
          command: node cli/bin/cypress info --dev
      - store-npm-logs

  server-e2e-tests-chrome:
    <<: *defaults
    parallelism: 8
    steps:
      - run-e2e-tests:
          browser: chrome

  server-e2e-tests-electron:
    <<: *defaults
    parallelism: 8
    steps:
      - run-e2e-tests:
          browser: electron

  server-e2e-tests-firefox:
    <<: *defaults
    parallelism: 8
    steps:
      - run-e2e-tests:
          browser: firefox

linux-workflow: &linux-workflow
  jobs:
    - build
    - lint:
        name: Linux lint
        requires:
          - build
    - server-e2e-tests-chrome:
        requires:
          - build
    - server-e2e-tests-electron:
        requires:
          - build
    - server-e2e-tests-firefox:
        requires:
          - build

workflows:
  linux:
    <<: *linux-workflow
