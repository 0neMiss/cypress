import { Configuration } from "webpack";

interface AdditionalOptions {
  /**
   * Allows to adjust the webpackConfig that our dev-server will use
   * @param config configuration generated by the plugin
   * @returns modified final configuration
   */
  setWebpackConfig?(config:Configuration): Configuration
}

/**
 * Inject a webpack dev server with the proper configuration for babel transpilation
 * @param on comes from the argument of the `pluginsFile` function
 * @param config comes from the argument of the `pluginsFile` function
 * @param additionalOptions additional options object (create an empty object it to see how to use it)
 */
declare function setupBabelDevServer(on: Cypress.PluginEvents, config: Cypress.PluginConfigOptions, additionalOptions?: AdditionalOptions): void
/**
 * Sets up a webpack dev server with the proper configuration for babel transpilation
 * @param options comes from the `setupDevServer()` function first argument
 * @param additionalOptions additional options object (create an empty object to see how to use it)
 * @returns the resolved dev server object that cypress can use to start testing
 */
declare function setupBabelDevServer(options: Cypress.DevServerOptions, additionalOptions?: AdditionalOptions): Cypress.ResolvedDevServerConfig

export = setupBabelDevServer;