### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AddProjectInput {
  isCurrent: Boolean!
  projectRoot: String!
  testingType: String!
}

"""Namespace for information related to the app"""
type App {
  """Whether this is the first open of the application or not"""
  isFirstOpen: Boolean!

  """Metadata about the wizard"""
  wizard: Wizard
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum FrontendFramework {
  cra
  nextjs
  nuxtjs
  reactjs
  vuecli
  vuejs
}

type InitPluginsStatus {
  message: String
  state: PluginsState!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  addProject(input: AddProjectInput!): Project!
  initializePlugins: Project!

  """Installs the dependencies for the component testing step"""
  wizardInstallDependencies: Wizard

  """Navigates backward in the wizard"""
  wizardNavigateBack(type: TestingTypeEnum!): Wizard

  """Sets the frontend bundler we want to use for the project"""
  wizardSetBundler(name: SupportedBundlers): Wizard

  """Sets the frontend framework we want to use for the project"""
  wizardSetFramework(framework: FrontendFramework!): Wizard

  """Sets the current testing type we want to use"""
  wizardSetTestingType(type: TestingTypeEnum!): Wizard

  """Validates that the manual install has occurred properly"""
  wizardValidateManualInstall: Wizard
}

enum PluginsState {
  error
  initialized
  initializing
  uninitialized
}

type Project {
  isCurrent: Boolean!
  isOpen: Boolean!
  plugins: InitPluginsStatus
  projectRoot: String!
}

type Query {
  app: App
  openProject: Project
  projects: [Project]!
}

"""The bundlers that we can use with Cypress"""
enum SupportedBundlers {
  vite
  webpack
}

type TestingType {
  description: String
  id: TestingTypeEnum
  title: String
}

enum TestingTypeEnum {
  component
  e2e
}

"""
The Wizard is a container for any state associated with initial onboarding to Cypress
"""
type Wizard {
  """All of the bundlers to choose from"""
  allBundlers: [WizardBundler]

  """All of the component testing frameworks to choose from"""
  frameworks: [WizardFrontendFramework]
  step: WizardStep

  """
  The testing type we are setting in the wizard, null if this has not been chosen
  """
  testingType: TestingTypeEnum
}

type WizardBundler {
  id: SupportedBundlers

  """Whether there are multiple options to choose from given the framework"""
  isOnlyOption: Boolean

  """Whether this is the selected framework bundler"""
  isSelected: Boolean
  name: String
}

"""A frontend framework that we can setup within the app"""
type WizardFrontendFramework {
  """The name of the framework"""
  name: FrontendFramework

  """
  A list of packages to install, null if we have not chosen both a framework and bundler
  """
  packagesToInstall: [WizardNpmPackage]

  """All of the supported bundlers for this framework"""
  supportedBundlers: [WizardBundler]
}

"""Details about an NPM Package listed during the wizard install"""
type WizardNpmPackage {
  description: String

  """The package name that you would npm install"""
  name: String
}

enum WizardStep {
  createConfig
  installDependencies
  selectFramework
  setupComplete
  welcome
}
