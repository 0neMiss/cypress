/* eslint-disable */
/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { BaseContext } from "./../context/BaseContext"
import type { App } from "./../entities/App"
import type { Wizard, WizardFrontendFramework, WizardBundler, WizardNpmPackage } from "./../entities/Wizard"
import type { TestingType } from "./../entities/TestingType"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AddProjectInput: { // input type
    isCurrent: boolean; // Boolean!
    projectRoot: string; // String!
    testingType: string; // String!
  }
}

export interface NexusGenEnums {
  FrontendFramework: "cra" | "nextjs" | "nuxtjs" | "reactjs" | "vuecli" | "vuejs"
  PluginsState: "error" | "initialized" | "initializing" | "uninitialized"
  SupportedBundlers: "vite" | "webpack"
  TestingTypeEnum: "component" | "e2e"
  WizardStep: "createConfig" | "installDependencies" | "selectFramework" | "setupComplete" | "welcome"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  JSON: any
}

export interface NexusGenObjects {
  App: App;
  InitPluginsStatus: { // root type
    message?: string | null; // String
    state: NexusGenEnums['PluginsState']; // PluginsState!
  }
  Mutation: {};
  Project: { // root type
    isCurrent: boolean; // Boolean!
    isOpen: boolean; // Boolean!
    plugins?: NexusGenRootTypes['InitPluginsStatus'] | null; // InitPluginsStatus
    projectRoot: string; // String!
  }
  Query: {};
  TestingType: TestingType;
  Wizard: Wizard;
  WizardBundler: WizardBundler;
  WizardFrontendFramework: WizardFrontendFramework;
  WizardNpmPackage: WizardNpmPackage;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  App: { // field return type
    isFirstOpen: boolean; // Boolean!
    wizard: NexusGenRootTypes['Wizard'] | null; // Wizard
  }
  InitPluginsStatus: { // field return type
    message: string | null; // String
    state: NexusGenEnums['PluginsState']; // PluginsState!
  }
  Mutation: { // field return type
    addProject: NexusGenRootTypes['Project']; // Project!
    initializePlugins: NexusGenRootTypes['Project']; // Project!
    wizardInstallDependencies: NexusGenRootTypes['Wizard'] | null; // Wizard
    wizardNavigateBack: NexusGenRootTypes['Wizard'] | null; // Wizard
    wizardSetBundler: NexusGenRootTypes['Wizard'] | null; // Wizard
    wizardSetFramework: NexusGenRootTypes['Wizard'] | null; // Wizard
    wizardSetTestingType: NexusGenRootTypes['Wizard'] | null; // Wizard
    wizardValidateManualInstall: NexusGenRootTypes['Wizard'] | null; // Wizard
  }
  Project: { // field return type
    isCurrent: boolean; // Boolean!
    isOpen: boolean; // Boolean!
    plugins: NexusGenRootTypes['InitPluginsStatus'] | null; // InitPluginsStatus
    projectRoot: string; // String!
  }
  Query: { // field return type
    app: NexusGenRootTypes['App'] | null; // App
    openProject: NexusGenRootTypes['Project'] | null; // Project
    projects: Array<NexusGenRootTypes['Project'] | null>; // [Project]!
  }
  TestingType: { // field return type
    description: string | null; // String
    id: NexusGenEnums['TestingTypeEnum'] | null; // TestingTypeEnum
    title: string | null; // String
  }
  Wizard: { // field return type
    allBundlers: Array<NexusGenRootTypes['WizardBundler'] | null> | null; // [WizardBundler]
    frameworks: Array<NexusGenRootTypes['WizardFrontendFramework'] | null> | null; // [WizardFrontendFramework]
    step: NexusGenEnums['WizardStep'] | null; // WizardStep
    testingType: NexusGenEnums['TestingTypeEnum'] | null; // TestingTypeEnum
  }
  WizardBundler: { // field return type
    id: NexusGenEnums['SupportedBundlers'] | null; // SupportedBundlers
    isOnlyOption: boolean | null; // Boolean
    isSelected: boolean | null; // Boolean
    name: string | null; // String
  }
  WizardFrontendFramework: { // field return type
    name: NexusGenEnums['FrontendFramework'] | null; // FrontendFramework
    packagesToInstall: Array<NexusGenRootTypes['WizardNpmPackage'] | null> | null; // [WizardNpmPackage]
    supportedBundlers: Array<NexusGenRootTypes['WizardBundler'] | null> | null; // [WizardBundler]
  }
  WizardNpmPackage: { // field return type
    description: string | null; // String
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  App: { // field return type name
    isFirstOpen: 'Boolean'
    wizard: 'Wizard'
  }
  InitPluginsStatus: { // field return type name
    message: 'String'
    state: 'PluginsState'
  }
  Mutation: { // field return type name
    addProject: 'Project'
    initializePlugins: 'Project'
    wizardInstallDependencies: 'Wizard'
    wizardNavigateBack: 'Wizard'
    wizardSetBundler: 'Wizard'
    wizardSetFramework: 'Wizard'
    wizardSetTestingType: 'Wizard'
    wizardValidateManualInstall: 'Wizard'
  }
  Project: { // field return type name
    isCurrent: 'Boolean'
    isOpen: 'Boolean'
    plugins: 'InitPluginsStatus'
    projectRoot: 'String'
  }
  Query: { // field return type name
    app: 'App'
    openProject: 'Project'
    projects: 'Project'
  }
  TestingType: { // field return type name
    description: 'String'
    id: 'TestingTypeEnum'
    title: 'String'
  }
  Wizard: { // field return type name
    allBundlers: 'WizardBundler'
    frameworks: 'WizardFrontendFramework'
    step: 'WizardStep'
    testingType: 'TestingTypeEnum'
  }
  WizardBundler: { // field return type name
    id: 'SupportedBundlers'
    isOnlyOption: 'Boolean'
    isSelected: 'Boolean'
    name: 'String'
  }
  WizardFrontendFramework: { // field return type name
    name: 'FrontendFramework'
    packagesToInstall: 'WizardNpmPackage'
    supportedBundlers: 'WizardBundler'
  }
  WizardNpmPackage: { // field return type name
    description: 'String'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addProject: { // args
      input: NexusGenInputs['AddProjectInput']; // AddProjectInput!
    }
    wizardNavigateBack: { // args
      type: NexusGenEnums['TestingTypeEnum']; // TestingTypeEnum!
    }
    wizardSetBundler: { // args
      name?: NexusGenEnums['SupportedBundlers'] | null; // SupportedBundlers
    }
    wizardSetFramework: { // args
      framework: NexusGenEnums['FrontendFramework']; // FrontendFramework!
    }
    wizardSetTestingType: { // args
      type: NexusGenEnums['TestingTypeEnum']; // TestingTypeEnum!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: BaseContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}