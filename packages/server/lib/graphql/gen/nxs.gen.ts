/* eslint-disable */
/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { App } from "./../entities/App"
import type { AppOptions } from "./../entities/AppOptions"
import type { Node } from "./../entities/Node"
import type { Browser } from "./../entities/Browser"
import type { Dashboard } from "./../entities/Dashboard"
import type { Experiment } from "./../entities/Experiment"
import type { File } from "./../entities/File"
import type { Folder } from "./../entities/Folder"
import type { Organization } from "./../entities/Organization"
import type { Project } from "./../entities/Project"
import type { ProjectConfig } from "./../entities/ProjectConfig"
import type { Release } from "./../entities/Release"
import type { User } from "./../entities/User"
import type { Wizard, WizardDependency } from "./../entities/Wizard"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  CurrentStep: "installDependencies" | "selectFramework"
  SpecType: "component" | "integration"
  browserState: "closed" | "opened" | "opening"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  JSON: any
}

export interface NexusGenObjects {
  App: App;
  AppOptions: AppOptions;
  Browser: Browser;
  Dashboard: Dashboard;
  Experiment: Experiment;
  File: File;
  Folder: Folder;
  Mutation: {};
  Organization: Organization;
  Project: Project;
  ProjectConfig: ProjectConfig;
  Query: {};
  Release: Release;
  User: User;
  Wizard: Wizard;
  WizardDependency: WizardDependency;
}

export interface NexusGenInterfaces {
  Node: Node;
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  App: { // field return type
    cypressVersion: string | null; // String
    experiments: Array<NexusGenRootTypes['Experiment'] | null> | null; // [Experiment]
    field: string | null; // String
    name: string | null; // String
    options: NexusGenRootTypes['AppOptions'] | null; // AppOptions
    recentProjects: Array<NexusGenRootTypes['Project'] | null> | null; // [Project]
  }
  AppOptions: { // field return type
    cypressEnv: string | null; // String
    os: string | null; // String
    projectRoot: string | null; // String
    proxyBypassList: string | null; // String
    proxyServer: string | null; // String
    proxySource: string | null; // String
  }
  Browser: { // field return type
    id: string | null; // ID
    state: NexusGenEnums['browserState'] | null; // browserState
  }
  Dashboard: { // field return type
    todo: boolean | null; // Boolean
  }
  Experiment: { // field return type
    name: string | null; // String
  }
  File: { // field return type
    id: string | null; // ID
  }
  Folder: { // field return type
    displayName: string | null; // String
    hasChildren: boolean | null; // Boolean
    path: string | null; // String
    specType: NexusGenEnums['SpecType'] | null; // SpecType
  }
  Mutation: { // field return type
    addProject: NexusGenRootTypes['Query'] | null; // Query
    closeBrowser: NexusGenRootTypes['Query'] | null; // Query
    closeProject: NexusGenRootTypes['Query'] | null; // Query
    externalOpen: boolean | null; // Boolean
    logOut: NexusGenRootTypes['Query'] | null; // Query
    removeProject: NexusGenRootTypes['App'] | null; // App
    selectProject: NexusGenRootTypes['Query'] | null; // Query
    setScaffoldPaths: NexusGenRootTypes['ProjectConfig'] | null; // ProjectConfig
    wizardSetComponentFramework: NexusGenRootTypes['Query'] | null; // Query
    wizardSetDismissedHelper: NexusGenRootTypes['Wizard'] | null; // Wizard
    wizardSetTestingType: NexusGenRootTypes['Query'] | null; // Query
  }
  Organization: { // field return type
    name: string | null; // String
  }
  Project: { // field return type
    absolutePath: string; // String!
    browserState: NexusGenEnums['browserState'] | null; // browserState
    browsers: Array<NexusGenRootTypes['Browser'] | null> | null; // [Browser]
    displayName: string | null; // String
    displayPath: string | null; // String
    id: string | null; // ID
    integrationFolder: string | null; // String
    name: string | null; // String
    organization: NexusGenRootTypes['Organization'] | null; // Organization
    relativePath: string; // String!
    sortedSpecsList: Array<NexusGenRootTypes['File'] | null> | null; // [File]
  }
  ProjectConfig: { // field return type
    todo: boolean | null; // Boolean
  }
  Query: { // field return type
    app: NexusGenRootTypes['App']; // App!
    currentProject: NexusGenRootTypes['Project'] | null; // Project
    recentProjects: Array<NexusGenRootTypes['Project'] | null> | null; // [Project]
    wizard: NexusGenRootTypes['Wizard'] | null; // Wizard
  }
  Release: { // field return type
    todo: boolean | null; // Boolean
  }
  User: { // field return type
    displayName: string | null; // String
    email: string | null; // String
    name: string | null; // String
  }
  Wizard: { // field return type
    canGoBackStep: boolean | null; // Boolean
    canGoNextStep: boolean | null; // Boolean
    currentStep: NexusGenEnums['CurrentStep'] | null; // CurrentStep
    dependenciesToInstall: Array<NexusGenRootTypes['WizardDependency'] | null> | null; // [WizardDependency]
    packageManager: string | null; // String
    showNewUserWelcome: boolean | null; // Boolean
  }
  WizardDependency: { // field return type
    description: string | null; // String
    packageName: string | null; // String
  }
  Node: { // field return type
    id: string | null; // ID
  }
}

export interface NexusGenFieldTypeNames {
  App: { // field return type name
    cypressVersion: 'String'
    experiments: 'Experiment'
    field: 'String'
    name: 'String'
    options: 'AppOptions'
    recentProjects: 'Project'
  }
  AppOptions: { // field return type name
    cypressEnv: 'String'
    os: 'String'
    projectRoot: 'String'
    proxyBypassList: 'String'
    proxyServer: 'String'
    proxySource: 'String'
  }
  Browser: { // field return type name
    id: 'ID'
    state: 'browserState'
  }
  Dashboard: { // field return type name
    todo: 'Boolean'
  }
  Experiment: { // field return type name
    name: 'String'
  }
  File: { // field return type name
    id: 'ID'
  }
  Folder: { // field return type name
    displayName: 'String'
    hasChildren: 'Boolean'
    path: 'String'
    specType: 'SpecType'
  }
  Mutation: { // field return type name
    addProject: 'Query'
    closeBrowser: 'Query'
    closeProject: 'Query'
    externalOpen: 'Boolean'
    logOut: 'Query'
    removeProject: 'App'
    selectProject: 'Query'
    setScaffoldPaths: 'ProjectConfig'
    wizardSetComponentFramework: 'Query'
    wizardSetDismissedHelper: 'Wizard'
    wizardSetTestingType: 'Query'
  }
  Organization: { // field return type name
    name: 'String'
  }
  Project: { // field return type name
    absolutePath: 'String'
    browserState: 'browserState'
    browsers: 'Browser'
    displayName: 'String'
    displayPath: 'String'
    id: 'ID'
    integrationFolder: 'String'
    name: 'String'
    organization: 'Organization'
    relativePath: 'String'
    sortedSpecsList: 'File'
  }
  ProjectConfig: { // field return type name
    todo: 'Boolean'
  }
  Query: { // field return type name
    app: 'App'
    currentProject: 'Project'
    recentProjects: 'Project'
    wizard: 'Wizard'
  }
  Release: { // field return type name
    todo: 'Boolean'
  }
  User: { // field return type name
    displayName: 'String'
    email: 'String'
    name: 'String'
  }
  Wizard: { // field return type name
    canGoBackStep: 'Boolean'
    canGoNextStep: 'Boolean'
    currentStep: 'CurrentStep'
    dependenciesToInstall: 'WizardDependency'
    packageManager: 'String'
    showNewUserWelcome: 'Boolean'
  }
  WizardDependency: { // field return type name
    description: 'String'
    packageName: 'String'
  }
  Node: { // field return type name
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    externalOpen: { // args
      params: NexusGenScalars['JSON'] | null; // JSON
      url: string; // String!
    }
    removeProject: { // args
      id: string; // ID!
    }
    selectProject: { // args
      id: string; // ID!
    }
    wizardSetTestingType: { // args
      type?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  Node: "Browser" | "File" | "Project"
}

export interface NexusGenTypeInterfaces {
  Browser: "Node"
  File: "Node"
  Project: "Node"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "Node";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}