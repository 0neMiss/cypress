"""All query entry points for the test runner"""
type Query {
  app: App!

  """The active project for the application, if any"""
  currentProject: Project

  """All projects we know about on the machine"""
  recentProjects: [Project]

  """Returns metadata associated with the onboarding wizard"""
  wizard: Wizard

  """Auto-generated by nexus-decorators as the objectType is missing fields"""
  todo: Boolean
  api: Remote_Api
}

type Mutation {
  wizardSetTestingType(type: String): Query
  wizardSetDismissedHelper: Wizard
  wizardSetComponentFramework: Query
  logOut: Query
  externalOpen(url: String!, params: JSON = "{}"): Boolean
  closeBrowser: Query

  """Removes a local project from the recentProjects list"""
  removeProject(
    """The ID of the project we are removing"""
    id: ID!
  ): App

  """When we select the active project"""
  selectProject(id: ID!): Query

  """
  When we add a project, either by dragging or selecting. Adds the project & selects it
  """
  addProject: Query
  closeProject: Query
  setScaffoldPaths: ProjectConfig
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type App {
  """This is an app with a name"""
  name: String
  field: String
  recentProjects: [Project]

  """The current version of the cypress runner"""
  cypressVersion: String
  options: AppOptions
  experiments: [Experiment]
  updateAvailable: Boolean
  latestCypressVersion: String
}

type AppOptions {
  cypressEnv: String

  """The current OS we are using"""
  os: String
  projectRoot: String
  proxySource: String
  proxyServer: String
  proxyBypassList: String

  """Whether we opened Cypress from the CLI"""
  invokedFromCli: Boolean
  cwd: String
  testingType: String
  config: JSON
  argv: [String]
}

enum browserState {
  opening
  opened
  closed
}

interface Node {
  id: ID
}

type Browser implements Node {
  id: ID
  state: browserState
}

"""A feature flag that can be enabled"""
type Experiment {
  name: String
}

type File implements Node {
  id: ID
}

"""A folder"""
type Folder {
  displayName: String
  specType: SpecType
  path: String
  hasChildren: Boolean
}

type Organization {
  name: String
}

enum ProjectType {
  e2e
  component
}

"""A project is a directory with a cypress.json file"""
type Project implements Node {
  id: ID
  name: String

  """Folder containing the integration tests"""
  integrationFolder: String
  organization: Organization
  type: ProjectType
  browserState: browserState
  relativePath: String!
  absolutePath: String!
  displayName: String
  displayPath: String
  sortedSpecsList: [File]
  browsers: [Browser]
}

"""All configuration for a project"""
type ProjectConfig {
  """Auto-generated by nexus-decorators as the objectType is missing fields"""
  todo: Boolean
}

"""A release of the test runner"""
type Release {
  """Auto-generated by nexus-decorators as the objectType is missing fields"""
  todo: Boolean
}

enum WizardCurrentStep {
  selectFramework
  installDependencies
}

"""Groups all actions & data associated with the onboarding wizard"""
type Wizard {
  showNewUserWelcome: Boolean
  dependenciesToInstall: [WizardDependency]
  currentStep: WizardCurrentStep

  """Whether we can go to the next step in the onboarding flow"""
  canGoNextStep: Boolean

  """Whether we can go to the previous step in the onboarding flow"""
  canGoBackStep: Boolean
  packageManager: String
}

type WizardDependency {
  packageName: String
  description: String
}

enum SpecType {
  integration
  component
}

type Remote_Api {
  isAuthenticated: Boolean
  me: Remote_User
  projectById(id: ID!): Remote_Project
  projectsByIds(id: [ID!]!): Remote_Project
}

"""A user as represented in the test runner"""
type Remote_User {
  name: String
}

"""A project, as represented in the test-runner"""
type Remote_Project {
  runs: [Remote_Run]
}

"""A test run as represented in the test runner"""
type Remote_Run {
  id: String
}
