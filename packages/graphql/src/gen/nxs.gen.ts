/* eslint-disable */
/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { DataContext } from "@packages/data-context"
import type { AppDataShape, DevStateShape, WizardDataShape } from "@packages/data-context/src/data/coreDataShape"
import type { BaseErrorSource } from "./../schemaTypes/objectTypes/gql-BaseError"
import type { FoundBrowser, CodeLanguage, FrontendFramework } from "@packages/types"
import type { ProjectShape } from "./../schemaTypes/objectTypes"
import type { core, connectionPluginCore } from "nexus"
import type { LiveMutationFieldOpts } from "@packages/graphql/src/plugins"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
    /**
     * A mutation which signals to the frontend to refetch
     */
    liveMutation<FieldName extends string>(
          fieldName: FieldName, 
          config: LiveMutationFieldOpts<TypeName, FieldName>
        ): void;
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface WizardUpdateInput {
  direction?: WizardNavigateDirection | null; // WizardNavigateDirection
  testingType?: TestingTypeEnum | null; // TestingTypeEnum
}

export interface NexusGenInputs {
  WizardUpdateInput: WizardUpdateInput
}

export type BrowserFamily = "chromium" | "firefox"

export type CloudRunStatus = "CANCELLED" | "ERRORED" | "FAILED" | "NOTESTS" | "OVERLIMIT" | "PASSED" | "RUNNING" | "TIMEDOUT"

export type CodeGenType = "component" | "story"

export type CodeLanguageEnum = "js" | "ts"

export type DevRelaunchAction = "dismiss" | "trigger"

export type FrontendFrameworkEnum = "cra" | "nextjs" | "nuxtjs" | "react" | "vue" | "vuecli"

export type NavItem = "learn" | "projectSetup" | "runs" | "settings"

export type PluginsState = "error" | "initialized" | "initializing" | "uninitialized"

export type SpecType = "component" | "integration"

export type SupportedBundlers = "vite" | "webpack"

export type TestingTypeEnum = "component" | "e2e"

export type WizardConfigFileStatusEnum = "changes" | "error" | "skipped" | "valid"

export type WizardNavigateDirection = "back" | "forward"

export type WizardStep = "configFiles" | "initializePlugins" | "installDependencies" | "selectFramework" | "setupComplete" | "welcome"

export interface NexusGenEnums {
  BrowserFamily: BrowserFamily
  CloudRunStatus: CloudRunStatus
  CodeGenType: CodeGenType
  CodeLanguageEnum: CodeLanguageEnum
  DevRelaunchAction: DevRelaunchAction
  FrontendFrameworkEnum: FrontendFrameworkEnum
  NavItem: NavItem
  PluginsState: PluginsState
  SpecType: SpecType
  SupportedBundlers: SupportedBundlers
  TestingTypeEnum: TestingTypeEnum
  WizardConfigFileStatusEnum: WizardConfigFileStatusEnum
  WizardNavigateDirection: WizardNavigateDirection
  WizardStep: WizardStep
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateTime: any
  JSON: any
}

export interface NexusGenObjects {
  App: AppDataShape;
  BaseError: BaseErrorSource;
  Browser: FoundBrowser;
  CloudOrganization: {};
  CloudOrganizationConnection: {};
  CloudOrganizationEdge: {};
  CloudProject: {};
  CloudProjectConnection: {};
  CloudProjectEdge: {};
  CloudRecordKey: {};
  CloudRun: {};
  CloudRunCommitInfo: {};
  CloudRunConnection: {};
  CloudRunEdge: {};
  CloudUser: {};
  DevState: DevStateShape;
  FileParts: { // root type
    absolute: string; // String!
    baseName: string; // String!
    fileName: string; // String!
    name: string; // String!
    relative: string; // String!
  }
  FilePartsConnection: { // root type
    edges: NexusGenRootTypes['FilePartsEdge'][]; // [FilePartsEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  FilePartsEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['FileParts']; // FileParts!
  }
  GeneratedSpec: { // root type
    content: string; // String!
    spec: NexusGenRootTypes['FileParts']; // FileParts!
  }
  GitInfo: { // root type
    author?: string | null; // String
    lastModifiedHumanReadable?: string | null; // String
    lastModifiedTimestamp?: string | null; // String
  }
  Mutation: {};
  NavigationItem: { // root type
    iconPath: string; // String!
    name: string; // String!
    type: NavItem; // NavItem!
  }
  NavigationMenu: {};
  PageInfo: {};
  Project: ProjectShape;
  ProjectPreferences: { // root type
    browserId?: string | null; // String
    testingType?: string | null; // String
  }
  Query: {};
  Spec: { // root type
    absolute: string; // String!
    baseName: string; // String!
    fileExtension: string; // String!
    fileName: string; // String!
    name: string; // String!
    relative: string; // String!
    specFileExtension: string; // String!
    specType: SpecType; // SpecType!
  }
  SpecConnection: { // root type
    edges: NexusGenRootTypes['SpecEdge'][]; // [SpecEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  SpecEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Spec']; // Spec!
  }
  Storybook: { // root type
    storybookRoot: string; // String!
  }
  TestingTypeInfo: { // root type
    description: string; // String!
    title: string; // String!
    type: TestingTypeEnum; // TestingTypeEnum!
  }
  Wizard: WizardDataShape;
  WizardBundler: { // root type
    name: string; // String!
    package: string; // String!
    type: SupportedBundlers; // SupportedBundlers!
  }
  WizardCodeLanguage: CodeLanguage;
  WizardFrontendFramework: FrontendFramework;
  WizardNpmPackage: { // root type
    description: string; // String!
    name: string; // String!
    package: string; // String!
  }
  WizardSampleConfigFile: { // root type
    content: string; // String!
    description?: string | null; // String
    filePath: string; // String!
    status: WizardConfigFileStatusEnum; // WizardConfigFileStatusEnum!
  }
}

export interface NexusGenInterfaces {
  Node: NexusGenRootTypes['Browser'] | NexusGenRootTypes['CloudOrganization'] | NexusGenRootTypes['CloudProject'] | NexusGenRootTypes['CloudRecordKey'] | NexusGenRootTypes['CloudRun'] | NexusGenRootTypes['CloudUser'] | NexusGenRootTypes['FileParts'] | NexusGenRootTypes['NavigationItem'] | NexusGenRootTypes['Project'] | NexusGenRootTypes['Spec'] | NexusGenRootTypes['Storybook'] | NexusGenRootTypes['TestingTypeInfo'] | NexusGenRootTypes['WizardBundler'] | NexusGenRootTypes['WizardCodeLanguage'] | NexusGenRootTypes['WizardFrontendFramework'] | NexusGenRootTypes['WizardNpmPackage'] | NexusGenRootTypes['WizardSampleConfigFile'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  App: { // field return type
    activeProject: NexusGenRootTypes['Project'] | null; // Project
    activeTestingType: TestingTypeEnum | null; // TestingTypeEnum
    browsers: NexusGenRootTypes['Browser'][] | null; // [Browser!]
    healthCheck: string; // String!
    isAuthBrowserOpened: boolean; // Boolean!
    isInGlobalMode: boolean; // Boolean!
    projects: NexusGenRootTypes['Project'][]; // [Project!]!
    selectedBrowser: NexusGenRootTypes['Browser'] | null; // Browser
  }
  BaseError: { // field return type
    message: string | null; // String
    stack: string | null; // String
    title: string | null; // String
  }
  Browser: { // field return type
    channel: string; // String!
    disabled: boolean; // Boolean!
    displayName: string; // String!
    family: BrowserFamily; // BrowserFamily!
    id: string; // ID!
    isSelected: boolean; // Boolean!
    majorVersion: string | null; // String
    name: string; // String!
    path: string; // String!
    version: string; // String!
  }
  CloudOrganization: { // field return type
    id: string; // ID!
    name: string | null; // String
    projects: NexusGenRootTypes['CloudProjectConnection'] | null; // CloudProjectConnection
  }
  CloudOrganizationConnection: { // field return type
    edges: NexusGenRootTypes['CloudOrganizationEdge'][]; // [CloudOrganizationEdge!]!
    nodes: NexusGenRootTypes['CloudOrganization'][]; // [CloudOrganization!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  CloudOrganizationEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['CloudOrganization']; // CloudOrganization!
  }
  CloudProject: { // field return type
    id: string; // ID!
    latestRun: NexusGenRootTypes['CloudRun'] | null; // CloudRun
    organization: NexusGenRootTypes['CloudOrganization'] | null; // CloudOrganization
    recordKeys: NexusGenRootTypes['CloudRecordKey'][] | null; // [CloudRecordKey!]
    runs: NexusGenRootTypes['CloudRunConnection'] | null; // CloudRunConnection
    slug: string; // String!
  }
  CloudProjectConnection: { // field return type
    edges: NexusGenRootTypes['CloudProjectEdge'][]; // [CloudProjectEdge!]!
    nodes: NexusGenRootTypes['CloudProject'][]; // [CloudProject!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  CloudProjectEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['CloudProject']; // CloudProject!
  }
  CloudRecordKey: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    key: string | null; // String
    lastUsedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  CloudRun: { // field return type
    commitInfo: NexusGenRootTypes['CloudRunCommitInfo'] | null; // CloudRunCommitInfo
    createdAt: NexusGenScalars['Date'] | null; // Date
    id: string; // ID!
    status: CloudRunStatus | null; // CloudRunStatus
    totalDuration: number | null; // Int
    totalFailed: number | null; // Int
    totalPassed: number | null; // Int
    totalPending: number | null; // Int
    totalRunning: number | null; // Int
    totalSkipped: number | null; // Int
    totalTests: number | null; // Int
  }
  CloudRunCommitInfo: { // field return type
    authorAvatar: string | null; // String
    authorEmail: string | null; // String
    authorName: string | null; // String
    branch: string | null; // String
    branchUrl: string | null; // String
    message: string | null; // String
    sha: string | null; // String
    summary: string | null; // String
    url: string | null; // String
  }
  CloudRunConnection: { // field return type
    edges: NexusGenRootTypes['CloudRunEdge'][]; // [CloudRunEdge!]!
    nodes: NexusGenRootTypes['CloudRun'][]; // [CloudRun!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  CloudRunEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['CloudRun']; // CloudRun!
  }
  CloudUser: { // field return type
    email: string | null; // String
    fullName: string | null; // String
    id: string; // ID!
    organizations: NexusGenRootTypes['CloudOrganizationConnection'] | null; // CloudOrganizationConnection
    userIsViewer: boolean; // Boolean!
  }
  DevState: { // field return type
    needsRelaunch: boolean | null; // Boolean
  }
  FileParts: { // field return type
    absolute: string; // String!
    baseName: string; // String!
    fileName: string; // String!
    id: string; // ID!
    name: string; // String!
    relative: string; // String!
  }
  FilePartsConnection: { // field return type
    edges: NexusGenRootTypes['FilePartsEdge'][]; // [FilePartsEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  FilePartsEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['FileParts']; // FileParts!
  }
  GeneratedSpec: { // field return type
    content: string; // String!
    id: string; // ID!
    spec: NexusGenRootTypes['FileParts']; // FileParts!
  }
  GitInfo: { // field return type
    author: string | null; // String
    lastModifiedHumanReadable: string | null; // String
    lastModifiedTimestamp: string | null; // String
  }
  Mutation: { // field return type
    addProject: boolean | null; // Boolean
    appCreateComponentIndexHtml: boolean | null; // Boolean
    appCreateConfigFile: boolean | null; // Boolean
    clearActiveProject: boolean | null; // Boolean
    devRelaunch: boolean | null; // Boolean
    generateSpecFromStory: boolean | null; // Boolean
    hideBrowserWindow: NexusGenRootTypes['App']; // App!
    initializeOpenProject: boolean | null; // Boolean
    internal_clearAllProjectPreferencesCache: boolean | null; // Boolean
    internal_clearLatestProjectCache: boolean | null; // Boolean
    internal_clearProjectPreferencesCache: boolean | null; // Boolean
    internal_triggerIpcToApp: boolean | null; // Boolean
    internal_triggerIpcToLaunchpad: boolean | null; // Boolean
    launchOpenProject: boolean | null; // Boolean
    launchpadSetBrowser: boolean | null; // Boolean
    login: boolean | null; // Boolean
    logout: boolean | null; // Boolean
    navigationMenuSetItem: boolean | null; // Boolean
    removeProject: boolean | null; // Boolean
    setActiveProject: boolean | null; // Boolean
    setCurrentSpec: boolean | null; // Boolean
    setProjectPreferences: NexusGenRootTypes['App']; // App!
    showBrowserWindow: NexusGenRootTypes['App']; // App!
    wizardInstallDependencies: NexusGenRootTypes['Wizard'] | null; // Wizard
    wizardSetBundler: boolean | null; // Boolean
    wizardSetCodeLanguage: boolean | null; // Boolean
    wizardSetFramework: boolean | null; // Boolean
    wizardUpdate: boolean | null; // Boolean
    wizardValidateManualInstall: NexusGenRootTypes['Wizard'] | null; // Wizard
  }
  NavigationItem: { // field return type
    iconPath: string; // String!
    id: string; // ID!
    name: string; // String!
    selected: boolean; // Boolean!
    type: NavItem; // NavItem!
  }
  NavigationMenu: { // field return type
    items: NexusGenRootTypes['NavigationItem'][]; // [NavigationItem!]!
    selected: NavItem; // NavItem!
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Project: { // field return type
    cloudProject: NexusGenRootTypes['CloudProject'] | null; // CloudProject
    codeGenCandidates: NexusGenRootTypes['FilePartsConnection'] | null; // FilePartsConnection
    codeGenGlob: string; // String!
    config: NexusGenScalars['JSON']; // JSON!
    currentSpec: NexusGenRootTypes['Spec'] | null; // Spec
    generatedSpec: NexusGenRootTypes['GeneratedSpec'] | null; // GeneratedSpec
    id: string; // ID!
    isFirstTimeCT: boolean; // Boolean!
    isFirstTimeE2E: boolean; // Boolean!
    preferences: NexusGenRootTypes['ProjectPreferences'] | null; // ProjectPreferences
    projectId: string | null; // String
    projectRoot: string; // String!
    specs: NexusGenRootTypes['SpecConnection'] | null; // SpecConnection
    storybook: NexusGenRootTypes['Storybook'] | null; // Storybook
    title: string; // String!
  }
  ProjectPreferences: { // field return type
    browserId: string | null; // String
    testingType: string | null; // String
  }
  Query: { // field return type
    app: NexusGenRootTypes['App']; // App!
    baseError: NexusGenRootTypes['BaseError'] | null; // BaseError
    cloudNode: NexusGenRootTypes['Node'] | null; // Node
    cloudProjectBySlug: NexusGenRootTypes['CloudProject'] | null; // CloudProject
    cloudProjectsBySlugs: Array<NexusGenRootTypes['CloudProject'] | null> | null; // [CloudProject]
    cloudViewer: NexusGenRootTypes['CloudUser'] | null; // CloudUser
    dev: NexusGenRootTypes['DevState']; // DevState!
    navigationMenu: NexusGenRootTypes['NavigationMenu'] | null; // NavigationMenu
    wizard: NexusGenRootTypes['Wizard']; // Wizard!
  }
  Spec: { // field return type
    absolute: string; // String!
    baseName: string; // String!
    fileExtension: string; // String!
    fileName: string; // String!
    gitInfo: NexusGenRootTypes['GitInfo'] | null; // GitInfo
    id: string; // ID!
    name: string; // String!
    relative: string; // String!
    specFileExtension: string; // String!
    specType: SpecType; // SpecType!
  }
  SpecConnection: { // field return type
    edges: NexusGenRootTypes['SpecEdge'][]; // [SpecEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  SpecEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Spec']; // Spec!
  }
  Storybook: { // field return type
    id: string; // ID!
    storybookRoot: string; // String!
  }
  TestingTypeInfo: { // field return type
    description: string; // String!
    id: string; // ID!
    title: string; // String!
    type: TestingTypeEnum; // TestingTypeEnum!
  }
  Wizard: { // field return type
    allBundlers: NexusGenRootTypes['WizardBundler'][]; // [WizardBundler!]!
    allLanguages: NexusGenRootTypes['WizardCodeLanguage'][]; // [WizardCodeLanguage!]!
    bundler: NexusGenRootTypes['WizardBundler'] | null; // WizardBundler
    canNavigateForward: boolean; // Boolean!
    chosenTestingTypePluginsInitialized: boolean; // Boolean!
    description: string | null; // String
    framework: NexusGenRootTypes['WizardFrontendFramework'] | null; // WizardFrontendFramework
    frameworks: NexusGenRootTypes['WizardFrontendFramework'][]; // [WizardFrontendFramework!]!
    isManualInstall: boolean; // Boolean!
    language: NexusGenRootTypes['WizardCodeLanguage'] | null; // WizardCodeLanguage
    packagesToInstall: NexusGenRootTypes['WizardNpmPackage'][] | null; // [WizardNpmPackage!]
    sampleConfigFiles: NexusGenRootTypes['WizardSampleConfigFile'][] | null; // [WizardSampleConfigFile!]
    sampleTemplate: string | null; // String
    step: WizardStep; // WizardStep!
    testingType: TestingTypeEnum | null; // TestingTypeEnum
    testingTypes: NexusGenRootTypes['TestingTypeInfo'][]; // [TestingTypeInfo!]!
    title: string | null; // String
  }
  WizardBundler: { // field return type
    id: string; // ID!
    isSelected: boolean | null; // Boolean
    name: string; // String!
    package: string; // String!
    type: SupportedBundlers; // SupportedBundlers!
  }
  WizardCodeLanguage: { // field return type
    id: string; // ID!
    isSelected: boolean; // Boolean!
    name: string; // String!
    type: CodeLanguageEnum; // CodeLanguageEnum!
  }
  WizardFrontendFramework: { // field return type
    id: string; // ID!
    isSelected: boolean; // Boolean!
    name: string; // String!
    supportedBundlers: NexusGenRootTypes['WizardBundler'][]; // [WizardBundler!]!
    type: FrontendFrameworkEnum; // FrontendFrameworkEnum!
  }
  WizardNpmPackage: { // field return type
    description: string; // String!
    id: string; // ID!
    name: string; // String!
    package: string; // String!
  }
  WizardSampleConfigFile: { // field return type
    content: string; // String!
    description: string | null; // String
    filePath: string; // String!
    id: string; // ID!
    status: WizardConfigFileStatusEnum; // WizardConfigFileStatusEnum!
  }
  Node: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenFieldTypeNames {
  App: { // field return type name
    activeProject: 'Project'
    activeTestingType: 'TestingTypeEnum'
    browsers: 'Browser'
    healthCheck: 'String'
    isAuthBrowserOpened: 'Boolean'
    isInGlobalMode: 'Boolean'
    projects: 'Project'
    selectedBrowser: 'Browser'
  }
  BaseError: { // field return type name
    message: 'String'
    stack: 'String'
    title: 'String'
  }
  Browser: { // field return type name
    channel: 'String'
    disabled: 'Boolean'
    displayName: 'String'
    family: 'BrowserFamily'
    id: 'ID'
    isSelected: 'Boolean'
    majorVersion: 'String'
    name: 'String'
    path: 'String'
    version: 'String'
  }
  CloudOrganization: { // field return type name
    id: 'ID'
    name: 'String'
    projects: 'CloudProjectConnection'
  }
  CloudOrganizationConnection: { // field return type name
    edges: 'CloudOrganizationEdge'
    nodes: 'CloudOrganization'
    pageInfo: 'PageInfo'
  }
  CloudOrganizationEdge: { // field return type name
    cursor: 'String'
    node: 'CloudOrganization'
  }
  CloudProject: { // field return type name
    id: 'ID'
    latestRun: 'CloudRun'
    organization: 'CloudOrganization'
    recordKeys: 'CloudRecordKey'
    runs: 'CloudRunConnection'
    slug: 'String'
  }
  CloudProjectConnection: { // field return type name
    edges: 'CloudProjectEdge'
    nodes: 'CloudProject'
    pageInfo: 'PageInfo'
  }
  CloudProjectEdge: { // field return type name
    cursor: 'String'
    node: 'CloudProject'
  }
  CloudRecordKey: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    key: 'String'
    lastUsedAt: 'DateTime'
  }
  CloudRun: { // field return type name
    commitInfo: 'CloudRunCommitInfo'
    createdAt: 'Date'
    id: 'ID'
    status: 'CloudRunStatus'
    totalDuration: 'Int'
    totalFailed: 'Int'
    totalPassed: 'Int'
    totalPending: 'Int'
    totalRunning: 'Int'
    totalSkipped: 'Int'
    totalTests: 'Int'
  }
  CloudRunCommitInfo: { // field return type name
    authorAvatar: 'String'
    authorEmail: 'String'
    authorName: 'String'
    branch: 'String'
    branchUrl: 'String'
    message: 'String'
    sha: 'String'
    summary: 'String'
    url: 'String'
  }
  CloudRunConnection: { // field return type name
    edges: 'CloudRunEdge'
    nodes: 'CloudRun'
    pageInfo: 'PageInfo'
  }
  CloudRunEdge: { // field return type name
    cursor: 'String'
    node: 'CloudRun'
  }
  CloudUser: { // field return type name
    email: 'String'
    fullName: 'String'
    id: 'ID'
    organizations: 'CloudOrganizationConnection'
    userIsViewer: 'Boolean'
  }
  DevState: { // field return type name
    needsRelaunch: 'Boolean'
  }
  FileParts: { // field return type name
    absolute: 'String'
    baseName: 'String'
    fileName: 'String'
    id: 'ID'
    name: 'String'
    relative: 'String'
  }
  FilePartsConnection: { // field return type name
    edges: 'FilePartsEdge'
    pageInfo: 'PageInfo'
  }
  FilePartsEdge: { // field return type name
    cursor: 'String'
    node: 'FileParts'
  }
  GeneratedSpec: { // field return type name
    content: 'String'
    id: 'ID'
    spec: 'FileParts'
  }
  GitInfo: { // field return type name
    author: 'String'
    lastModifiedHumanReadable: 'String'
    lastModifiedTimestamp: 'String'
  }
  Mutation: { // field return type name
    addProject: 'Boolean'
    appCreateComponentIndexHtml: 'Boolean'
    appCreateConfigFile: 'Boolean'
    clearActiveProject: 'Boolean'
    devRelaunch: 'Boolean'
    generateSpecFromStory: 'Boolean'
    hideBrowserWindow: 'App'
    initializeOpenProject: 'Boolean'
    internal_clearAllProjectPreferencesCache: 'Boolean'
    internal_clearLatestProjectCache: 'Boolean'
    internal_clearProjectPreferencesCache: 'Boolean'
    internal_triggerIpcToApp: 'Boolean'
    internal_triggerIpcToLaunchpad: 'Boolean'
    launchOpenProject: 'Boolean'
    launchpadSetBrowser: 'Boolean'
    login: 'Boolean'
    logout: 'Boolean'
    navigationMenuSetItem: 'Boolean'
    removeProject: 'Boolean'
    setActiveProject: 'Boolean'
    setCurrentSpec: 'Boolean'
    setProjectPreferences: 'App'
    showBrowserWindow: 'App'
    wizardInstallDependencies: 'Wizard'
    wizardSetBundler: 'Boolean'
    wizardSetCodeLanguage: 'Boolean'
    wizardSetFramework: 'Boolean'
    wizardUpdate: 'Boolean'
    wizardValidateManualInstall: 'Wizard'
  }
  NavigationItem: { // field return type name
    iconPath: 'String'
    id: 'ID'
    name: 'String'
    selected: 'Boolean'
    type: 'NavItem'
  }
  NavigationMenu: { // field return type name
    items: 'NavigationItem'
    selected: 'NavItem'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  Project: { // field return type name
    cloudProject: 'CloudProject'
    codeGenCandidates: 'FilePartsConnection'
    codeGenGlob: 'String'
    config: 'JSON'
    currentSpec: 'Spec'
    generatedSpec: 'GeneratedSpec'
    id: 'ID'
    isFirstTimeCT: 'Boolean'
    isFirstTimeE2E: 'Boolean'
    preferences: 'ProjectPreferences'
    projectId: 'String'
    projectRoot: 'String'
    specs: 'SpecConnection'
    storybook: 'Storybook'
    title: 'String'
  }
  ProjectPreferences: { // field return type name
    browserId: 'String'
    testingType: 'String'
  }
  Query: { // field return type name
    app: 'App'
    baseError: 'BaseError'
    cloudNode: 'Node'
    cloudProjectBySlug: 'CloudProject'
    cloudProjectsBySlugs: 'CloudProject'
    cloudViewer: 'CloudUser'
    dev: 'DevState'
    navigationMenu: 'NavigationMenu'
    wizard: 'Wizard'
  }
  Spec: { // field return type name
    absolute: 'String'
    baseName: 'String'
    fileExtension: 'String'
    fileName: 'String'
    gitInfo: 'GitInfo'
    id: 'ID'
    name: 'String'
    relative: 'String'
    specFileExtension: 'String'
    specType: 'SpecType'
  }
  SpecConnection: { // field return type name
    edges: 'SpecEdge'
    pageInfo: 'PageInfo'
  }
  SpecEdge: { // field return type name
    cursor: 'String'
    node: 'Spec'
  }
  Storybook: { // field return type name
    id: 'ID'
    storybookRoot: 'String'
  }
  TestingTypeInfo: { // field return type name
    description: 'String'
    id: 'ID'
    title: 'String'
    type: 'TestingTypeEnum'
  }
  Wizard: { // field return type name
    allBundlers: 'WizardBundler'
    allLanguages: 'WizardCodeLanguage'
    bundler: 'WizardBundler'
    canNavigateForward: 'Boolean'
    chosenTestingTypePluginsInitialized: 'Boolean'
    description: 'String'
    framework: 'WizardFrontendFramework'
    frameworks: 'WizardFrontendFramework'
    isManualInstall: 'Boolean'
    language: 'WizardCodeLanguage'
    packagesToInstall: 'WizardNpmPackage'
    sampleConfigFiles: 'WizardSampleConfigFile'
    sampleTemplate: 'String'
    step: 'WizardStep'
    testingType: 'TestingTypeEnum'
    testingTypes: 'TestingTypeInfo'
    title: 'String'
  }
  WizardBundler: { // field return type name
    id: 'ID'
    isSelected: 'Boolean'
    name: 'String'
    package: 'String'
    type: 'SupportedBundlers'
  }
  WizardCodeLanguage: { // field return type name
    id: 'ID'
    isSelected: 'Boolean'
    name: 'String'
    type: 'CodeLanguageEnum'
  }
  WizardFrontendFramework: { // field return type name
    id: 'ID'
    isSelected: 'Boolean'
    name: 'String'
    supportedBundlers: 'WizardBundler'
    type: 'FrontendFrameworkEnum'
  }
  WizardNpmPackage: { // field return type name
    description: 'String'
    id: 'ID'
    name: 'String'
    package: 'String'
  }
  WizardSampleConfigFile: { // field return type name
    content: 'String'
    description: 'String'
    filePath: 'String'
    id: 'ID'
    status: 'WizardConfigFileStatusEnum'
  }
  Node: { // field return type name
    id: 'ID'
  }
}

export interface CloudOrganizationProjectsArgs {
  after?: string | null; // String
  before?: string | null; // String
  first?: number | null; // Int
  last?: number | null; // Int
}

export interface CloudProjectRunsArgs {
  after?: string | null; // String
  before?: string | null; // String
  cypressVersion?: string | null; // String
  first?: number | null; // Int
  last?: number | null; // Int
  status?: CloudRunStatus | null; // CloudRunStatus
}

export interface CloudRunCommitInfoMessageArgs {
  truncate?: number | null; // Int
}

export interface CloudUserOrganizationsArgs {
  after?: string | null; // String
  before?: string | null; // String
  first?: number | null; // Int
  last?: number | null; // Int
}

export interface MutationAddProjectArgs {
  open?: boolean | null; // Boolean
  path: string; // String!
}

export interface MutationAppCreateComponentIndexHtmlArgs {
  template: string; // String!
}

export interface MutationAppCreateConfigFileArgs {
  code: string; // String!
  configFilename: string; // String!
}

export interface MutationDevRelaunchArgs {
  action: DevRelaunchAction; // DevRelaunchAction!
}

export interface MutationGenerateSpecFromStoryArgs {
  storyPath: string; // String!
}

export interface MutationInternal_clearProjectPreferencesCacheArgs {
  projectTitle: string; // String!
}

export interface MutationInternal_triggerIpcToLaunchpadArgs {
  msg: string; // String!
}

export interface MutationLaunchpadSetBrowserArgs {
  id: string; // ID!
}

export interface MutationNavigationMenuSetItemArgs {
  type: NavItem; // NavItem!
}

export interface MutationRemoveProjectArgs {
  path: string; // String!
}

export interface MutationSetActiveProjectArgs {
  path: string; // String!
}

export interface MutationSetCurrentSpecArgs {
  id: string; // ID!
}

export interface MutationSetProjectPreferencesArgs {
  browserId: string; // ID!
  testingType: TestingTypeEnum; // TestingTypeEnum!
}

export interface MutationWizardSetBundlerArgs {
  bundler: SupportedBundlers; // SupportedBundlers!
}

export interface MutationWizardSetCodeLanguageArgs {
  language: CodeLanguageEnum; // CodeLanguageEnum!
}

export interface MutationWizardSetFrameworkArgs {
  framework: FrontendFrameworkEnum; // FrontendFrameworkEnum!
}

export interface MutationWizardUpdateArgs {
  input: WizardUpdateInput; // WizardUpdateInput!
}

export interface ProjectCodeGenCandidatesArgs {
  after?: string | null; // String
  before?: string | null; // String
  first?: number | null; // Int
  glob: string; // String!
  last?: number | null; // Int
}

export interface ProjectCodeGenGlobArgs {
  type: CodeGenType; // CodeGenType!
}

export interface ProjectSpecsArgs {
  after?: string | null; // String
  before?: string | null; // String
  first?: number | null; // Int
  last?: number | null; // Int
}

export interface QueryCloudNodeArgs {
  id: string; // ID!
}

export interface QueryCloudProjectBySlugArgs {
  slug: string; // String!
}

export interface QueryCloudProjectsBySlugsArgs {
  slugs: string[]; // [String!]!
}

export interface NexusGenArgTypes {
  CloudOrganization: {
    projects: CloudOrganizationProjectsArgs
  }
  CloudProject: {
    runs: CloudProjectRunsArgs
  }
  CloudRunCommitInfo: {
    message: CloudRunCommitInfoMessageArgs
  }
  CloudUser: {
    organizations: CloudUserOrganizationsArgs
  }
  Mutation: {
    addProject: MutationAddProjectArgs
    appCreateComponentIndexHtml: MutationAppCreateComponentIndexHtmlArgs
    appCreateConfigFile: MutationAppCreateConfigFileArgs
    devRelaunch: MutationDevRelaunchArgs
    generateSpecFromStory: MutationGenerateSpecFromStoryArgs
    internal_clearProjectPreferencesCache: MutationInternal_clearProjectPreferencesCacheArgs
    internal_triggerIpcToLaunchpad: MutationInternal_triggerIpcToLaunchpadArgs
    launchpadSetBrowser: MutationLaunchpadSetBrowserArgs
    navigationMenuSetItem: MutationNavigationMenuSetItemArgs
    removeProject: MutationRemoveProjectArgs
    setActiveProject: MutationSetActiveProjectArgs
    setCurrentSpec: MutationSetCurrentSpecArgs
    setProjectPreferences: MutationSetProjectPreferencesArgs
    wizardSetBundler: MutationWizardSetBundlerArgs
    wizardSetCodeLanguage: MutationWizardSetCodeLanguageArgs
    wizardSetFramework: MutationWizardSetFrameworkArgs
    wizardUpdate: MutationWizardUpdateArgs
  }
  Project: {
    codeGenCandidates: ProjectCodeGenCandidatesArgs
    codeGenGlob: ProjectCodeGenGlobArgs
    specs: ProjectSpecsArgs
  }
  Query: {
    cloudNode: QueryCloudNodeArgs
    cloudProjectBySlug: QueryCloudProjectBySlugArgs
    cloudProjectsBySlugs: QueryCloudProjectsBySlugsArgs
  }
}

export interface NexusGenAbstractTypeMembers {
  Node: "Browser" | "CloudOrganization" | "CloudProject" | "CloudRecordKey" | "CloudRun" | "CloudUser" | "FileParts" | "NavigationItem" | "Project" | "Spec" | "Storybook" | "TestingTypeInfo" | "WizardBundler" | "WizardCodeLanguage" | "WizardFrontendFramework" | "WizardNpmPackage" | "WizardSampleConfigFile"
}

export interface NexusGenTypeInterfaces {
  Browser: "Node"
  CloudOrganization: "Node"
  CloudProject: "Node"
  CloudRecordKey: "Node"
  CloudRun: "Node"
  CloudUser: "Node"
  FileParts: "Node"
  NavigationItem: "Node"
  Project: "Node"
  Spec: "Node"
  Storybook: "Node"
  TestingTypeInfo: "Node"
  WizardBundler: "Node"
  WizardCodeLanguage: "Node"
  WizardFrontendFramework: "Node"
  WizardNpmPackage: "Node"
  WizardSampleConfigFile: "Node"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "Node";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: DataContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    
        node?: (TypeName extends keyof NexusGenRootTypes ? keyof NexusGenRootTypes[TypeName] : never) | core.FieldResolver<TypeName, 'id'>
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}